// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: comment.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const countCommentPost = `-- name: CountCommentPost :one
SELECT COUNT(*) from comment where post_id = $1
`

func (q *Queries) CountCommentPost(ctx context.Context, postID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCommentPost, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createNewComment = `-- name: CreateNewComment :one
INSERT INTO comment ("account_id", "post_id", "body") VALUES ($1,$2,$3) RETURNING id,body
`

type CreateNewCommentParams struct {
	AccountID uuid.UUID `json:"account_id"`
	PostID    uuid.UUID `json:"post_id"`
	Body      string    `json:"body"`
}

type CreateNewCommentRow struct {
	ID   uuid.UUID `json:"id"`
	Body string    `json:"body"`
}

func (q *Queries) CreateNewComment(ctx context.Context, arg CreateNewCommentParams) (*CreateNewCommentRow, error) {
	row := q.db.QueryRowContext(ctx, createNewComment, arg.AccountID, arg.PostID, arg.Body)
	var i CreateNewCommentRow
	err := row.Scan(&i.ID, &i.Body)
	return &i, err
}

const creteNewCommentWithParent = `-- name: CreteNewCommentWithParent :one
INSERT INTO comment ("account_id", "post_id", "body", "parrent_id") VALUES ($1,$2,$3,$4) RETURNING id,body,parrent_id
`

type CreteNewCommentWithParentParams struct {
	AccountID uuid.UUID     `json:"account_id"`
	PostID    uuid.UUID     `json:"post_id"`
	Body      string        `json:"body"`
	ParrentID uuid.NullUUID `json:"parrent_id"`
}

type CreteNewCommentWithParentRow struct {
	ID        uuid.UUID     `json:"id"`
	Body      string        `json:"body"`
	ParrentID uuid.NullUUID `json:"parrent_id"`
}

func (q *Queries) CreteNewCommentWithParent(ctx context.Context, arg CreteNewCommentWithParentParams) (*CreteNewCommentWithParentRow, error) {
	row := q.db.QueryRowContext(ctx, creteNewCommentWithParent,
		arg.AccountID,
		arg.PostID,
		arg.Body,
		arg.ParrentID,
	)
	var i CreteNewCommentWithParentRow
	err := row.Scan(&i.ID, &i.Body, &i.ParrentID)
	return &i, err
}

const deleteComment = `-- name: DeleteComment :exec
UPDATE comment SET status = 'DELETED' WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deleteCommentByPostId = `-- name: DeleteCommentByPostId :exec
DELETE FROM comment WHERE post_id = $1
`

func (q *Queries) DeleteCommentByPostId(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCommentByPostId, postID)
	return err
}

const queryCommentById = `-- name: QueryCommentById :one
SELECT id, body ,account_id,status FROM comment WHERE id = $1
`

type QueryCommentByIdRow struct {
	ID        uuid.UUID `json:"id"`
	Body      string    `json:"body"`
	AccountID uuid.UUID `json:"account_id"`
	Status    Status    `json:"status"`
}

func (q *Queries) QueryCommentById(ctx context.Context, id uuid.UUID) (*QueryCommentByIdRow, error) {
	row := q.db.QueryRowContext(ctx, queryCommentById, id)
	var i QueryCommentByIdRow
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.AccountID,
		&i.Status,
	)
	return &i, err
}

const queryCommentByPost = `-- name: QueryCommentByPost :many
SELECT id, body, parrent_id,status from comment WHERE post_id = $1 limit $2 offset $3
`

type QueryCommentByPostParams struct {
	PostID uuid.UUID `json:"post_id"`
	Limit  int64     `json:"limit"`
	Offset int64     `json:"offset"`
}

type QueryCommentByPostRow struct {
	ID        uuid.UUID     `json:"id"`
	Body      string        `json:"body"`
	ParrentID uuid.NullUUID `json:"parrent_id"`
	Status    Status        `json:"status"`
}

func (q *Queries) QueryCommentByPost(ctx context.Context, arg QueryCommentByPostParams) ([]*QueryCommentByPostRow, error) {
	rows, err := q.db.QueryContext(ctx, queryCommentByPost, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*QueryCommentByPostRow
	for rows.Next() {
		var i QueryCommentByPostRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.ParrentID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryCommentChild = `-- name: QueryCommentChild :many
SELECT id , body , parrent_id ,status from comment where parrent_id = $1
`

type QueryCommentChildRow struct {
	ID        uuid.UUID     `json:"id"`
	Body      string        `json:"body"`
	ParrentID uuid.NullUUID `json:"parrent_id"`
	Status    Status        `json:"status"`
}

func (q *Queries) QueryCommentChild(ctx context.Context, parrentID uuid.NullUUID) ([]*QueryCommentChildRow, error) {
	rows, err := q.db.QueryContext(ctx, queryCommentChild, parrentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*QueryCommentChildRow
	for rows.Next() {
		var i QueryCommentChildRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.ParrentID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCommentBody = `-- name: UpdateCommentBody :one
UPDATE comment SET body = $1 WHERE id = $2 RETURNING id, body
`

type UpdateCommentBodyParams struct {
	Body string    `json:"body"`
	ID   uuid.UUID `json:"id"`
}

type UpdateCommentBodyRow struct {
	ID   uuid.UUID `json:"id"`
	Body string    `json:"body"`
}

func (q *Queries) UpdateCommentBody(ctx context.Context, arg UpdateCommentBodyParams) (*UpdateCommentBodyRow, error) {
	row := q.db.QueryRowContext(ctx, updateCommentBody, arg.Body, arg.ID)
	var i UpdateCommentBodyRow
	err := row.Scan(&i.ID, &i.Body)
	return &i, err
}

const updateCommentCount = `-- name: UpdateCommentCount :exec
UPDATE post SET comment_count = $2  WHERE id = $1
`

type UpdateCommentCountParams struct {
	ID           uuid.UUID `json:"id"`
	CommentCount int64     `json:"comment_count"`
}

func (q *Queries) UpdateCommentCount(ctx context.Context, arg UpdateCommentCountParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentCount, arg.ID, arg.CommentCount)
	return err
}

const updateCommentCountIncrement = `-- name: UpdateCommentCountIncrement :exec
UPDATE post SET comment_count = comment_count + 1 WHERE id = $1
`

func (q *Queries) UpdateCommentCountIncrement(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateCommentCountIncrement, id)
	return err
}
