// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AccountStatus string

const (
	AccountStatusACTIVE   AccountStatus = "ACTIVE"
	AccountStatusINACTIVE AccountStatus = "INACTIVE"
)

func (e *AccountStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountStatus(s)
	case string:
		*e = AccountStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountStatus: %T", src)
	}
	return nil
}

type NullAccountStatus struct {
	AccountStatus AccountStatus `json:"account_status"`
	Valid         bool          `json:"valid"` // Valid is true if AccountStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AccountStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountStatus), nil
}

func (e AccountStatus) Valid() bool {
	switch e {
	case AccountStatusACTIVE,
		AccountStatusINACTIVE:
		return true
	}
	return false
}

type Role string

const (
	RoleUSER  Role = "USER"
	RoleADMIN Role = "ADMIN"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

func (e Role) Valid() bool {
	switch e {
	case RoleUSER,
		RoleADMIN:
		return true
	}
	return false
}

type Status string

const (
	StatusOK      Status = "OK"
	StatusDELETED Status = "DELETED"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

func (e Status) Valid() bool {
	switch e {
	case StatusOK,
		StatusDELETED:
		return true
	}
	return false
}

type Account struct {
	ID        uuid.UUID     `json:"id"`
	FirstName string        `json:"first_name"`
	LastName  string        `json:"last_name"`
	Username  string        `json:"username"`
	Email     string        `json:"email"`
	Role      Role          `json:"role"`
	Status    AccountStatus `json:"status"`
	Password  string        `json:"password"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

type AccountDetail struct {
	AccountID      uuid.UUID `json:"account_id"`
	GiveLike       int64     `json:"give_like"`
	GetLike        int64     `json:"get_like"`
	FollowersCount int64     `json:"followers_count"`
	FollowingCount int64     `json:"following_count"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

type Comment struct {
	ID        uuid.UUID     `json:"id"`
	PostID    uuid.UUID     `json:"post_id"`
	AccountID uuid.UUID     `json:"account_id"`
	ParrentID uuid.NullUUID `json:"parrent_id"`
	Body      string        `json:"body"`
	Status    Status        `json:"status"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

type Follow struct {
	AccountFollowed  uuid.UUID `json:"account_followed"`
	AccountFollowing uuid.UUID `json:"account_following"`
}

type Image struct {
	ID     uuid.UUID `json:"id"`
	PostID uuid.UUID `json:"post_id"`
	ImgUrl string    `json:"img_url"`
}

type Liked struct {
	AccountID uuid.UUID `json:"account_id"`
	PostID    uuid.UUID `json:"post_id"`
}

type Post struct {
	ID           uuid.UUID `json:"id"`
	AccountID    uuid.UUID `json:"account_id"`
	Caption      string    `json:"caption"`
	LikesCount   int64     `json:"likes_count"`
	CommentCount int64     `json:"comment_count"`
	Status       Status    `json:"status"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}
