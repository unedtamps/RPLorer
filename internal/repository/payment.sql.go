// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment.sql

package repository

import (
	"context"
	"database/sql"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO "Payment" (id, user_id, premium_type_id, amount) 
VALUES ($1, $2, $3, $4) RETURNING id, user_id, status, premium_type_id, amount
`

type CreatePaymentParams struct {
	ID            string         `json:"id"`
	UserID        sql.NullString `json:"user_id"`
	PremiumTypeID string         `json:"premium_type_id"`
	Amount        int64          `json:"amount"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.ID,
		arg.UserID,
		arg.PremiumTypeID,
		arg.Amount,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.PremiumTypeID,
		&i.Amount,
	)
	return &i, err
}

const getPaymentById = `-- name: GetPaymentById :one
SELECT id, user_id, status, premium_type_id, amount FROM "Payment" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPaymentById(ctx context.Context, id string) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentById, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.PremiumTypeID,
		&i.Amount,
	)
	return &i, err
}

const getPaymentByUserId = `-- name: GetPaymentByUserId :one
SELECT id, user_id, status, premium_type_id, amount FROM "Payment" WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetPaymentByUserId(ctx context.Context, userID sql.NullString) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByUserId, userID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.PremiumTypeID,
		&i.Amount,
	)
	return &i, err
}

const getPremiumTypeName = `-- name: GetPremiumTypeName :one
SELECT id, type_name FROM "PremiumType" WHERE type_name = $1 LIMIT 1
`

func (q *Queries) GetPremiumTypeName(ctx context.Context, typeName string) (*PremiumType, error) {
	row := q.db.QueryRowContext(ctx, getPremiumTypeName, typeName)
	var i PremiumType
	err := row.Scan(&i.ID, &i.TypeName)
	return &i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE "Payment" SET status = $1 WHERE id = $2 RETURNING id, user_id, status, premium_type_id, amount
`

type UpdatePaymentStatusParams struct {
	Status NullPaymentStatus `json:"status"`
	ID     string            `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentStatus, arg.Status, arg.ID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.PremiumTypeID,
		&i.Amount,
	)
	return &i, err
}
