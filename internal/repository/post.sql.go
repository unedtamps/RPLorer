// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const changePostStatus = `-- name: ChangePostStatus :exec
UPDATE post SET status = $1 WHERE id = $2 AND account_id = $3
`

type ChangePostStatusParams struct {
	Status    Status    `json:"status"`
	ID        uuid.UUID `json:"id"`
	AccountID uuid.UUID `json:"account_id"`
}

func (q *Queries) ChangePostStatus(ctx context.Context, arg ChangePostStatusParams) error {
	_, err := q.db.ExecContext(ctx, changePostStatus, arg.Status, arg.ID, arg.AccountID)
	return err
}

const coutAccoutPost = `-- name: CoutAccoutPost :one
SELECT COUNT(*) FROM post WHERE account_id = $1 AND status = 'OK'
`

func (q *Queries) CoutAccoutPost(ctx context.Context, accountID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, coutAccoutPost, accountID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comment ("account_id", "post_id", "body", "parrent_id") VALUES ($1,$2,$3,$4) RETURNING id
`

type CreateCommentParams struct {
	AccountID uuid.UUID     `json:"account_id"`
	PostID    uuid.UUID     `json:"post_id"`
	Body      string        `json:"body"`
	ParrentID uuid.NullUUID `json:"parrent_id"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.AccountID,
		arg.PostID,
		arg.Body,
		arg.ParrentID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createLikedPost = `-- name: CreateLikedPost :exec
INSERT INTO liked ("account_id", "post_id") VALUES ($1,$2)
`

type CreateLikedPostParams struct {
	AccountID uuid.UUID `json:"account_id"`
	PostID    uuid.UUID `json:"post_id"`
}

func (q *Queries) CreateLikedPost(ctx context.Context, arg CreateLikedPostParams) error {
	_, err := q.db.ExecContext(ctx, createLikedPost, arg.AccountID, arg.PostID)
	return err
}

const createPost = `-- name: CreatePost :one
INSERT INTO post ("account_id", "caption", "likes_count", "comment_count")
VALUES ($1,$2,$3,$4) RETURNING id
`

type CreatePostParams struct {
	AccountID    uuid.UUID `json:"account_id"`
	Caption      string    `json:"caption"`
	LikesCount   int64     `json:"likes_count"`
	CommentCount int64     `json:"comment_count"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.AccountID,
		arg.Caption,
		arg.LikesCount,
		arg.CommentCount,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createPostImages = `-- name: CreatePostImages :exec
INSERT INTO images ("post_id", "img_url") VALUES ($1,$2)
`

type CreatePostImagesParams struct {
	PostID uuid.UUID `json:"post_id"`
	ImgUrl string    `json:"img_url"`
}

func (q *Queries) CreatePostImages(ctx context.Context, arg CreatePostImagesParams) error {
	_, err := q.db.ExecContext(ctx, createPostImages, arg.PostID, arg.ImgUrl)
	return err
}

const deleteImageByPostId = `-- name: DeleteImageByPostId :exec
DELETE FROM images WHERE post_id = $1
`

func (q *Queries) DeleteImageByPostId(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteImageByPostId, postID)
	return err
}

const deleteLikedByPostId = `-- name: DeleteLikedByPostId :exec
DELETE FROM liked WHERE post_id = $1
`

func (q *Queries) DeleteLikedByPostId(ctx context.Context, postID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteLikedByPostId, postID)
	return err
}

const deleteLikedPost = `-- name: DeleteLikedPost :exec
DELETE FROM liked WHERE account_id = $1 AND post_id = $2
`

type DeleteLikedPostParams struct {
	AccountID uuid.UUID `json:"account_id"`
	PostID    uuid.UUID `json:"post_id"`
}

func (q *Queries) DeleteLikedPost(ctx context.Context, arg DeleteLikedPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteLikedPost, arg.AccountID, arg.PostID)
	return err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE FROM post WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePostById, id)
	return err
}

const insertNewPost = `-- name: InsertNewPost :one
INSERT INTO post ("account_id", "caption") VALUES ($1,$2) RETURNING id, caption
`

type InsertNewPostParams struct {
	AccountID uuid.UUID `json:"account_id"`
	Caption   string    `json:"caption"`
}

type InsertNewPostRow struct {
	ID      uuid.UUID `json:"id"`
	Caption string    `json:"caption"`
}

func (q *Queries) InsertNewPost(ctx context.Context, arg InsertNewPostParams) (*InsertNewPostRow, error) {
	row := q.db.QueryRowContext(ctx, insertNewPost, arg.AccountID, arg.Caption)
	var i InsertNewPostRow
	err := row.Scan(&i.ID, &i.Caption)
	return &i, err
}

const insertNewPostImages = `-- name: InsertNewPostImages :exec
INSERT INTO images ("id", "post_id", "img_url") VALUES ($1,$2,$3)
`

type InsertNewPostImagesParams struct {
	ID     uuid.UUID `json:"id"`
	PostID uuid.UUID `json:"post_id"`
	ImgUrl string    `json:"img_url"`
}

func (q *Queries) InsertNewPostImages(ctx context.Context, arg InsertNewPostImagesParams) error {
	_, err := q.db.ExecContext(ctx, insertNewPostImages, arg.ID, arg.PostID, arg.ImgUrl)
	return err
}

const queryGetAccoutFromLikedByPostId = `-- name: QueryGetAccoutFromLikedByPostId :many
SELECT account_id FROM liked WHERE post_id = $1
`

func (q *Queries) QueryGetAccoutFromLikedByPostId(ctx context.Context, postID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, queryGetAccoutFromLikedByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var account_id uuid.UUID
		if err := rows.Scan(&account_id); err != nil {
			return nil, err
		}
		items = append(items, account_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryImageByPostID = `-- name: QueryImageByPostID :many
SELECT i.img_url FROM images i JOIN post p on p.id = i.post_id AND p.status = 'OK' WHERE i.post_id = $1
`

func (q *Queries) QueryImageByPostID(ctx context.Context, postID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, queryImageByPostID, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var img_url string
		if err := rows.Scan(&img_url); err != nil {
			return nil, err
		}
		items = append(items, img_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPostByUserID = `-- name: QueryPostByUserID :many
SELECT id, caption FROM post WHERE account_id = $1 AND status = 'OK' LIMIT $2 OFFSET $3
`

type QueryPostByUserIDParams struct {
	AccountID uuid.UUID `json:"account_id"`
	Limit     int64     `json:"limit"`
	Offset    int64     `json:"offset"`
}

type QueryPostByUserIDRow struct {
	ID      uuid.UUID `json:"id"`
	Caption string    `json:"caption"`
}

func (q *Queries) QueryPostByUserID(ctx context.Context, arg QueryPostByUserIDParams) ([]*QueryPostByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, queryPostByUserID, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*QueryPostByUserIDRow
	for rows.Next() {
		var i QueryPostByUserIDRow
		if err := rows.Scan(&i.ID, &i.Caption); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryPostandImages = `-- name: QueryPostandImages :many
SELECT p.id as post_id, p.caption,p.likes_count, p.comment_count, i.img_url FROM post p 
LEFT JOIN images i ON p.id = i.post_id 
WHERE p.id = $1 AND p.status = 'OK'
`

type QueryPostandImagesRow struct {
	PostID       uuid.UUID      `json:"post_id"`
	Caption      string         `json:"caption"`
	LikesCount   int64          `json:"likes_count"`
	CommentCount int64          `json:"comment_count"`
	ImgUrl       sql.NullString `json:"img_url"`
}

func (q *Queries) QueryPostandImages(ctx context.Context, id uuid.UUID) ([]*QueryPostandImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, queryPostandImages, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*QueryPostandImagesRow
	for rows.Next() {
		var i QueryPostandImagesRow
		if err := rows.Scan(
			&i.PostID,
			&i.Caption,
			&i.LikesCount,
			&i.CommentCount,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryUserIdfromPost = `-- name: QueryUserIdfromPost :one
SELECT account_id FROM post WHERE id = $1
`

func (q *Queries) QueryUserIdfromPost(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, queryUserIdfromPost, id)
	var account_id uuid.UUID
	err := row.Scan(&account_id)
	return account_id, err
}

const updateFollowersCount = `-- name: UpdateFollowersCount :exec
UPDATE account_detail SET followers_count = followers_count + 1 WHERE account_id = $1
`

func (q *Queries) UpdateFollowersCount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateFollowersCount, accountID)
	return err
}

const updateFollowingCount = `-- name: UpdateFollowingCount :exec
UPDATE account_detail SET following_count = following_count + 1 WHERE account_id = $1
`

func (q *Queries) UpdateFollowingCount(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateFollowingCount, accountID)
	return err
}

const updateLikeCountDecrement = `-- name: UpdateLikeCountDecrement :one
UPDATE post SET likes_count = likes_count - 1 WHERE id = $1 AND likes_count > 0 AND status = 'OK' RETURNING account_id
`

func (q *Queries) UpdateLikeCountDecrement(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateLikeCountDecrement, id)
	var account_id uuid.UUID
	err := row.Scan(&account_id)
	return account_id, err
}

const updateLikeCountIncrement = `-- name: UpdateLikeCountIncrement :one
UPDATE post SET likes_count = likes_count + 1 WHERE id = $1 AND status = 'OK' RETURNING account_id
`

func (q *Queries) UpdateLikeCountIncrement(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateLikeCountIncrement, id)
	var account_id uuid.UUID
	err := row.Scan(&account_id)
	return account_id, err
}

const updatePostCaption = `-- name: UpdatePostCaption :one
UPDATE post SET caption = $1 WHERE id = $2 RETURNING id, caption, account_id
`

type UpdatePostCaptionParams struct {
	Caption string    `json:"caption"`
	ID      uuid.UUID `json:"id"`
}

type UpdatePostCaptionRow struct {
	ID        uuid.UUID `json:"id"`
	Caption   string    `json:"caption"`
	AccountID uuid.UUID `json:"account_id"`
}

func (q *Queries) UpdatePostCaption(ctx context.Context, arg UpdatePostCaptionParams) (*UpdatePostCaptionRow, error) {
	row := q.db.QueryRowContext(ctx, updatePostCaption, arg.Caption, arg.ID)
	var i UpdatePostCaptionRow
	err := row.Scan(&i.ID, &i.Caption, &i.AccountID)
	return &i, err
}

const updatePostDetailCount = `-- name: UpdatePostDetailCount :exec
UPDATE post SET likes_count = $1, comment_count = $2 WHERE id = $3
`

type UpdatePostDetailCountParams struct {
	LikesCount   int64     `json:"likes_count"`
	CommentCount int64     `json:"comment_count"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePostDetailCount(ctx context.Context, arg UpdatePostDetailCountParams) error {
	_, err := q.db.ExecContext(ctx, updatePostDetailCount, arg.LikesCount, arg.CommentCount, arg.ID)
	return err
}
