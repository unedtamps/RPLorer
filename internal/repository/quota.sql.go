// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: quota.sql

package repository

import (
	"context"
	"database/sql"
)

const decreaseOneQuota = `-- name: DecreaseOneQuota :exec
UPDATE "Quota" SET quota_amount = quota_amount - 1 WHERE id = $1
`

func (q *Queries) DecreaseOneQuota(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, decreaseOneQuota, id)
	return err
}

const getQuotaByPremiumTypeId = `-- name: GetQuotaByPremiumTypeId :one
SELECT id, premium_type_id, quota_amount FROM "Quota" WHERE premium_type_id = $1 LIMIT 1
`

func (q *Queries) GetQuotaByPremiumTypeId(ctx context.Context, premiumTypeID sql.NullString) (*Quotum, error) {
	row := q.db.QueryRowContext(ctx, getQuotaByPremiumTypeId, premiumTypeID)
	var i Quotum
	err := row.Scan(&i.ID, &i.PremiumTypeID, &i.QuotaAmount)
	return &i, err
}

const getQuotaByPremiumTypeIdForUpdate = `-- name: GetQuotaByPremiumTypeIdForUpdate :one
SELECT id, premium_type_id, quota_amount FROM "Quota" WHERE premium_type_id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetQuotaByPremiumTypeIdForUpdate(ctx context.Context, premiumTypeID sql.NullString) (*Quotum, error) {
	row := q.db.QueryRowContext(ctx, getQuotaByPremiumTypeIdForUpdate, premiumTypeID)
	var i Quotum
	err := row.Scan(&i.ID, &i.PremiumTypeID, &i.QuotaAmount)
	return &i, err
}
