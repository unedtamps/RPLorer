// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package repository

import (
	"context"
	"database/sql"
)

const changeUserStatus = `-- name: ChangeUserStatus :exec
UPDATE "User" SET account_status = $1 WHERE id = $2
`

type ChangeUserStatusParams struct {
	AccountStatus sql.NullBool `json:"account_status"`
	ID            string       `json:"id"`
}

func (q *Queries) ChangeUserStatus(ctx context.Context, arg ChangeUserStatusParams) error {
	_, err := q.db.ExecContext(ctx, changeUserStatus, arg.AccountStatus, arg.ID)
	return err
}

const changeUserType = `-- name: ChangeUserType :exec
UPDATE "User" SET acount_type = $1 WHERE id = $2
`

type ChangeUserTypeParams struct {
	AcountType sql.NullBool `json:"acount_type"`
	ID         string       `json:"id"`
}

func (q *Queries) ChangeUserType(ctx context.Context, arg ChangeUserTypeParams) error {
	_, err := q.db.ExecContext(ctx, changeUserType, arg.AcountType, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "User" (id, name, email, password) 
VALUES ($1, $2, $3, $4) 
RETURNING id, name, email
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return &i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
DELETE FROM "User" WHERE email = $1
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByEmail, email)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM "User" WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password 
FROM "User" WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) GetUser(ctx context.Context, id string) (*GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id , name , email , password 
FROM "User" ORDER BY created_at ASC LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

type GetUsersRow struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]*GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
